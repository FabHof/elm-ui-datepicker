[{"name":"DatePicker","comment":"\n\n\n# Basic Usage\n\n@docs input, Model, init, setToday, ChangeEvent, update, Settings, defaultSettings, initWithToday\n\n\n# Helpers\n\nFor when you want to be more in control\n\n@docs close, open\n\n","unions":[{"name":"ChangeEvent","comment":" Simple example of us in a update function:\n\n    update msg model =\n        case msg of\n            ChangePicker changeEvent ->\n                case changeEvent of\n                    DateChanged date ->\n                        -- update both date and text\n                        ( { model\n                            | date = Just date\n                            , dateText = Date.toIsoString date\n                          }\n                        , Cmd.none\n                        )\n\n                    TextChanged text ->\n                        ( { model\n                            | date =\n                                -- parse the text in any way you like\n                                Date.fromIsoString text\n                                    |> Result.toMaybe\n                                    |> Maybe.Extra.orElse model.date\n                            , dateText = text\n                          }\n                        , Cmd.none\n                        )\n\n                    DateCleared ->\n                        ( { model\n                            | date =\n                                Nothing\n                            , dateText = \"\"\n                          }\n                        , Cmd.none\n                        )\n\n                    PickerChanged subMsg ->\n                        -- internal stuff changed\n                        -- call DatePicker.update\n                        ( { model\n                            | pickerModel =\n                                model.pickerModel\n                                    |> DatePicker.update subMsg\n                          }\n                        , Cmd.none\n                        )\n\n","args":[],"cases":[["DateChanged",["Date.Date"]],["TextChanged",["String.String"]],["DateCleared",[]],["PickerChanged",["DatePicker.Msg"]]]},{"name":"Model","comment":" Has all the internal picker of the date picker.\n","args":[],"cases":[]}],"aliases":[{"name":"Settings","comment":" ","args":[],"type":"{ firstDayOfWeek : Time.Weekday, focusColor : Element.Color }"}],"values":[{"name":"close","comment":" Closes the date picker.\n\nCommon use case: close date picker on date input:\n\n    DateChanged date ->\n        ( { model\n            | date = Just date\n            , dateText = Date.toIsoString date\n            , pickerModel =\n                model.pickerModel\n                    |> DatePicker.close\n        }\n        , Cmd.none\n        )\n\n**Note**: the date picker will reopen on _enter_ and _click_.\nTo prevent this, close the date picker on every update:\n\n    PickerChanged subMsg ->\n        ( { model\n            | pickerModel =\n                model.pickerModel\n                    |> DatePicker.update subMsg\n                    --picker will never open\n                    |> DatePicker.close\n            }\n        , Cmd.none\n        )\n\n","type":"DatePicker.Model -> DatePicker.Model"},{"name":"defaultSettings","comment":" Reasonable default settings.\n","type":"DatePicker.Settings"},{"name":"init","comment":" Gives you the initial model of the date picker.\nEasy to us in you own init function:\n\n(You probably want to get todays date to give it to the date picker using [DatePicker.setToday](DatePicker#setToday))\n\n    init =\n        ( { date = Nothing\n          , dateText = \"\"\n          , pickerModel = DatePicker.init\n          }\n        , Task.perform SetToday Date.today\n        )\n\n","type":"DatePicker.Model"},{"name":"initWithToday","comment":" Gives you the initial model of the date picker and sets the given date as today.\n","type":"Date.Date -> DatePicker.Model"},{"name":"input","comment":" This view function is a wrapper around `Input.text`, with a more complex `onChange`, a `selected` date, the internal `model` and some `settings`\n","type":"List.List (Element.Attribute msg) -> { onChange : DatePicker.ChangeEvent -> msg, selected : Maybe.Maybe Date.Date, text : String.String, label : Element.Input.Label msg, placeholder : Maybe.Maybe (Element.Input.Placeholder msg), model : DatePicker.Model, settings : DatePicker.Settings } -> Element.Element msg"},{"name":"open","comment":" Opens the date picker\n\nExample: start with open picker:\n\n    init : ( Model, Cmd Msg )\n    init =\n        ( { date = Nothing\n          , dateText = \"\"\n          , pickerModel =\n                DatePicker.init\n                    |> DatePicker.open\n          }\n        , Task.perform SetToday Date.today\n        )\n\n","type":"DatePicker.Model -> DatePicker.Model"},{"name":"setToday","comment":" Gives the date picker information about what date it is today.\nUse this in your update function:\n\n    update msg model =\n        case msg of\n            SetToday today ->\n                ( { model\n                    | pickerModel =\n                        model.pickerModel\n                            |> DatePicker.setToday today\n                  }\n                , Cmd.none\n                )\n\n","type":"Date.Date -> DatePicker.Model -> DatePicker.Model"},{"name":"update","comment":" ","type":"DatePicker.Msg -> DatePicker.Model -> DatePicker.Model"}],"binops":[]}]